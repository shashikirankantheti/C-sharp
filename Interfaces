// >---
// >title: Interfaces in C#
// >taxonomy:
// >    category: docs
// >metadata:
// >    description: 'Interfaces. '
// >    keywords: 'Object Oriented Programming Modules in C#,Object Oriented Programming,Interfaces in C#,Interface'
// >---
// >|[fa icon=fa-user /]     | Shashi Kiran.Kantheti / tinitiate.com  |
// >|-------------------------------------------------------------|
// >|[fa icon=file-code-o /] | 01_Interfaces in C#.md


// >####Interfaces:

// >- An interface is defined as a syntactical contract that all the classes inheriting the interface should follow. The interface defines the 'what' part of the syntactical contract and the deriving classes define the 'how' part of the syntactical contract.

// >- Interfaces define properties, methods, and events, which are the members of the interface. Interfaces contain only the declaration of the members. It is the responsibility of the deriving class to define the members. It often helps in providing a standard structure that the deriving classes would follow.

// >- Abstract classes to some extent serve the same purpose, however, they are mostly used when only few methods are to be declared by the base class and the deriving class implements the functionalities.

// >- Using interfaces we can invoke functions from different classes through the same Interface reference, whereas using virtual functions we can invoke functions from different classes in the same inheritance hierarchy through the same reference.

// >**Declaring Interfaces:**

// >- Interfaces are declared using the interface keyword. It is similar to class declaration. Interface statements are public by default.

// > >public interface IValue <br>
// > >{ <br>
// > >  // interface members <br>
// > >  void showValue(); <br>
// > >  double getAmount(); <br>
// > >} <br>

// >**Example:**

// >C# Code:

// >A C# program to demonstrate Interfaces.

// >```
using System;
namespace InterfaceApplication
{
    public interface ITransactions
    {
        // interface members
        void showTransaction();
        double getAmount();
    }

    public class Transaction : ITransactions
    {
        private string tCode;
        private string date;
        private double amount;
        public Transaction()
        {
            tCode = " ";
            date = " ";
            amount = 0.0;
        }

        public Transaction(string c, string d, double a)
        {
            tCode = c;
            date = d;
            amount = a;
        }

        public double getAmount()
        {
            return amount;
        }

        public void showTransaction()
        {
            Console.WriteLine("Transaction: {0}", tCode);
            Console.WriteLine("Date: {0}", date);
            Console.WriteLine("Amount: {0}", getAmount());
            Console.WriteLine("-------------");
        }
    }
    class Tester
    {
        static void Main(string[] args)
        {
            Transaction t1 = new Transaction("01", "28/02/2017", 36200.40);
            Transaction t2 = new Transaction("02", "01/03/2017", 25700.60);
            t1.showTransaction();
            t2.showTransaction();
            Console.ReadKey();
        }
    }
}
// >```
// >**Output:**

// > >Transaction: 01 <br>
// > >Date: 28/02/2017 <br>
// > >Amount: 36200.4 <br>
// > >------------- <br>
// > >Transaction: 02 <br>
// > >Date: 01/03/2017 <br>
// > >Amount: 25700.6 <br>
// > >------------- <br>

