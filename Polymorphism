// >---
// >title: Polymorphism in C#


// >taxonomy:
// >    category: docs
// >metadata:
// >    description: 'Polymorphism means one name many forms. '
// >    keywords: 'Object Oriented Programming Modules in C#,Object Oriented Programming,Polymorphism in C#,Polymorphism '
// >---
// >|[fa icon=fa-user /]     | Shashi Kiran.Kantheti / tinitiate.com  |
// >|-------------------------------------------------------------|
// >|[fa icon=file-code-o /] | 01_Polymorphism in C#.md


// >###Polymorphism:
// >- Polymorphism means one name many forms. Polymorphism means one object behaving as multiple forms. One function behaves in different forms. In other words, "Many forms of a single object is called Polymorphism."

// >- With polymorphism, the same method or property can perform different actions depending on the run-time type of the instance that invokes it.
 
// >- There are two types of polymorphism:

// >	1.Static or compile time polymorphism
// >	2.Dynamic or runtime polymorphism

// >	|polymorphism types| Sub-types|
// >	|------------------|-----------|
// >	|Compile Time/Static/Overloading/Earli binding|1.Function overloading<br>2.operator overload|
// >	|Run Time/Dynamic/Overriding/Late binding|Virtual Function|


// >####1.Static or Compile Time Polymorphism:
// >- In static polymorphism, the decision is made at compile time.
// >- ompile time polymorphism is method overloading, where the compiler knows which overloaded method it is going to call.
// >- Method overloading is a concept where a class can have more than one method with the same name and different parameters.
// >- Compiler checks the type and number of parameters passed on to the method and decides which method to call at compile time and it will give an error if there are no methods that match the method signature of the method that is called at compile time.
// >- The mechanism of linking a function with an object during compile time is called early binding. It is also called static binding.
// >- C# provides two techniques to implement static polymorphism. They are:**Function overloading**,**Operator overloading**

// >####A. Function Overloading:
// >You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.

// >**Example:**

// >C# Code:

// >A C# code to demonstrate Function Overloading.
// >```
using System;
namespace FunctionOverloading
{
    class Printdata
    {
        void print(int i)
        {
            Console.WriteLine("Printing int: {0}", i);
        }

        void print(double f)
        {
            Console.WriteLine("Printing float: {0}", f);
        }

        void print(string s)
        {
            Console.WriteLine("Printing string: {0}", s);
        }
        static void Main(string[] args)
        {
            Printdata p = new Printdata();

            // Call print to print integer
            p.print(6);

            // Call print to print float
            p.print(506.263);

            // Call print to print string
            p.print("Hello How are you.");
            Console.Read();
        }
    }
}
// >```
// >**Output:**
// > >
// > >Printing int: 5 <br>
// > >Printing float: 500.263 <br>
// > >Printing string: Hello C++ 
// > >

// >#### B.Operator Overloading:
// >- Overloaded operators are functions with special names the keyword operator followed by the symbol for the operator being defined. similar to any other function, an overloaded operator has a return type and a parameter list.

// > >public static Box operator+ (Box b, Box c) <br>
// > >{<br>
// > >  Box box = new Box();<br>
// > >  box.length = b.length + c.length;<br>
// > >  box.breadth = b.breadth + c.breadth;<br>
// > >  box.height = b.height + c.height;<br>
// > >  return box;<br>
// > >}<br>

// >- The above function implements the addition operator (+) for a user-defined class Box. It adds the attributes of two Box objects and returns the resultant Box object.

// >##### Implementing the Operator Overloading:

// >A C# Code to demontrate Operator Overloading:

// >C# Code:
// >```
using System;
namespace OperatorOverloading
{
    class Box
    {
        private double length;   // Length of a box
        private double breadth;  // Breadth of a box
        private double height;   // Height of a box

        public double getVolume()
        {
            return length * breadth * height;
        }

        public void setLength(double len)
        {
            length = len;
        }

        public void setBreadth(double bre)
        {
            breadth = bre;
        }

        public void setHeight(double hei)
        {
            height = hei;
        }

        // Overload + operator to add two Box objects.
        public static Box operator +(Box b, Box c)
        {
            Box box = new Box();
            box.length = b.length + c.length;
            box.breadth = b.breadth + c.breadth;
            box.height = b.height + c.height;
            return box;
        }

    }

    class Tester
    {
        static void Main(string[] args)
        {
            Box Box1 = new Box();   // Declare Box1 of type Box
            Box Box2 = new Box();   // Declare Box2 of type Box
            Box Box3 = new Box();   // Declare Box3 of type Box
            double volume = 0.0;    // Store the volume of a box here

            // box 1 specification
            Box1.setLength(4.0);
            Box1.setBreadth(6.0);
            Box1.setHeight(8.0);

            // box 2 specification
            Box2.setLength(16.0);
            Box2.setBreadth(10.0);
            Box2.setHeight(18.0);

            // volume of box 1
            volume = Box1.getVolume();
            Console.WriteLine("Volume of Box1 : {0}", volume);

            // volume of box 2
            volume = Box2.getVolume();
            Console.WriteLine("Volume of Box2 : {0}", volume);

            // Add two object as follows:
            Box3 = Box1 + Box2;

            // volume of box 3
            volume = Box3.getVolume();
            Console.WriteLine("Volume of Box3 : {0}", volume);
            Console.ReadKey();
        }
    }
}
// >```
// >**Output:**
// > >Volume of Box1 : 192 <br>
// > >Volume of Box2 : 2880 <br>
// > >Volume of Box3 : 8320 <br>


// >##### Overloadable and Non-Overloadable Operators:

// >|Operators|	Description|
// >|----------|-----------|
// >|+, -, !, ~, ++, --	|These unary operators take one operand and can be overloaded.|
// >|+, -, *, /, %	|These binary operators take one operand and can be overloaded.|
// >|==, !=, <, >, <=, >=	|The comparison operators can be overloaded|
// >|&&, |||	The conditional logical operators cannot be overloaded directly.|
// >|+=, -=, *=, /=, %=	|The assignment operators cannot be overloaded.|
// >|=, ., ?:, ->, new, is, sizeof, typeof	|These operators cannot be overloaded.|

// >**Example:**

// >C# Code:

// >A C# program to perform different operators overloading.

// >```
using System;
namespace OperatorOvlApplication
{
    class Boxx
    {
        private double length;    // Length of a box
        private double breadth;   // Breadth of a box
        private double height;    // Height of a box

        public double getVolume()
        {
            return length * breadth * height;
        }

        public void setLength(double len)
        {
            length = len;
        }

        public void setBreadth(double bre)
        {
            breadth = bre;
        }


        public void setHeight(double hei)
        {
            height = hei;
        }

        // Overload + operator to add two Box objects.
        public static Boxx operator +(Boxx b, Boxx c)
        {
            Boxx B = new Boxx();
            B.length = b.length + c.length;
            B.breadth = b.breadth + c.breadth;
            B.height = b.height + c.height;
            return B;
        }

        public static bool operator ==(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length == rhs.length && lhs.height == rhs.height && lhs.breadth == rhs.breadth)
            {
                status = true;
            }
            return status;
        }

        public static bool operator !=(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length != rhs.length || lhs.height != rhs.height || lhs.breadth != rhs.breadth)
            {
                status = true;
            }
            return status;
        }

        public static bool operator <(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length < rhs.length && lhs.height < rhs.height && lhs.breadth < rhs.breadth)
            {
                status = true;
            }
            return status;
        }

        public static bool operator >(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length > rhs.length && lhs.height > rhs.height && lhs.breadth > rhs.breadth)
            {
                status = true;
            }
            return status;
        }

        public static bool operator <=(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length <= rhs.length && lhs.height <= rhs.height && lhs.breadth <= rhs.breadth)
            {
                status = true;
            }
            return status;
        }

        public static bool operator >=(Boxx lhs, Boxx rhs)
        {
            bool status = false;
            if (lhs.length >= rhs.length && lhs.height >= rhs.height && lhs.breadth >= rhs.breadth)
            {
                status = true;
            }
            return status;
        }
        public override string ToString()
        {
            return String.Format("({0}, {1}, {2})", length, breadth, height);
        }
    }

    class Tester
    {
        static void Main(string[] args)
        {
            Boxx Box1 = new Boxx();   // Declare Box1 of type Box
            Boxx Box2 = new Boxx();   // Declare Box2 of type Box
            Boxx Box3 = new Boxx();   // Declare Box3 of type Box
            Boxx Box4 = new Boxx();
            double volume = 0.0;    // Store the volume of a box here

            // box 1 specification
            Box1.setLength(6.0);
            Box1.setBreadth(7.0);
            Box1.setHeight(5.0);

            // box 2 specification
            Box2.setLength(12.0);
            Box2.setBreadth(13.0);
            Box2.setHeight(10.0);

            //displaying the Boxes using the overloaded ToString():
            Console.WriteLine("Box 1: {0}", Box1.ToString());
            Console.WriteLine("Box 2: {0}", Box2.ToString());
            Console.WriteLine("---------------------------");
            // volume of box 1
            volume = Box1.getVolume();
            Console.WriteLine("Volume of Box1 : {0}", volume);

            // volume of box 2
            volume = Box2.getVolume();
            Console.WriteLine("Volume of Box2 : {0}", volume);

            // Add two object as follows:
            Box3 = Box1 + Box2;
            Console.WriteLine("Box 3(Box 1+Box 2): {0}", Box3.ToString());

            // volume of box 3
            volume = Box3.getVolume();
            Console.WriteLine("Volume of Box3 : {0}", volume);
            Console.WriteLine("---------------------------");
            //comparing the boxes
            if (Box1 > Box2)
                Console.WriteLine("Box1 is greater than Box2");
            else
                Console.WriteLine("Box1 is  greater than Box2");

            Console.WriteLine("---------------------------");


            if (Box1 < Box2)
                Console.WriteLine("Box1 is less than Box2");
            else
                Console.WriteLine("Box1 is not less than Box2");

            Console.WriteLine("---------------------------");


            if (Box1 >= Box2)
                Console.WriteLine("Box1 is greater or equal to Box2");
            else
                Console.WriteLine("Box1 is not greater or equal to Box2");

            Console.WriteLine("---------------------------");


            if (Box1 <= Box2)
                Console.WriteLine("Box1 is less or equal to Box2");
            else
                Console.WriteLine("Box1 is not less or equal to Box2");

            Console.WriteLine("---------------------------");


            if (Box1 != Box2)
                Console.WriteLine("Box1 is not equal to Box2");
            else
                Console.WriteLine("Box1 is not greater or equal to Box2");

            Console.WriteLine("---------------------------");

            Box4 = Box3;

            if (Box3 == Box4)
                Console.WriteLine("Box3 is equal to Box4");
            else
                Console.WriteLine("Box3 is not equal to Box4");

            Console.ReadKey();
        }
    }
}
// >```
// >**Output:**
// > >
// > >Box 1: (6, 7, 5) <br>
// > >Box 2: (12, 13, 10) <br>
// > >--------------------------- <br>
// > >Volume of Box1 : 210 <br>
// > >Volume of Box2 : 1560 <br>
// > >Box 3(Box 1+Box 2): (18, 20, 15) <br>
// > >Volume of Box3 : 5400 <br>
// > >--------------------------- <br>
// > >Box1 is  greater than Box2 <br>
// > >--------------------------- <br>
// > >Box1 is less than Box2 <br>
// > >--------------------------- <br>
// > >Box1 is not greater or equal to Box2 <br>
// > >--------------------------- <br>
// > >Box1 is less or equal to Box2 <br>
// > >--------------------------- <br>
// > >Box1 is not equal to Box2 <br>
// > >--------------------------- <br>
// > >Box3 is equal to Box4 <br>
// > >




















