// >---
// >title: Structures in C#
// >taxonomy:
// >    category: docs
// >metadata:
// >    description: 'A structure is a value type data type. It helps you to make a single variable hold related data of various data types. '
// >    keywords: 'Structures in C#'
// >---
// >|[fa icon=fa-user /]     | Shashi Kiran.Kantheti / tinitiate.com  |
// >|-------------------------------------------------------------|
// >|[fa icon=file-code-o /] | 01_Structures.md


// >### Structures:

// >- A structure is a User-defined data type and value type data type.
// >- It helps you to make a single variable hold related data of various data types.
// >- The struct keyword is used for creating a structure.
// >- structs are used to represent a record.Suppose you want to keep track of your books in a library. You want to track attributes of the each book  like title,author,subject,book id,price,ISBN then we use structs.

// >**Syntax:**
// > >
// > >Struct  Struct_Name <br>
// > >{ <br>
// > > // fields; <br>
// > >}; <br>

// >- struct can be declared inside the namespace (or) inside the class but not inside the method.
 
 
// >####Declaring a Structure:

// >To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member for your program.
// > >
// > >struct Books <br>
// > >{  <br>
// > >   public string title; <br>
// > >   public string author; <br>
// > >   public string subject; <br>
// > >   public int book_id; <br>
// > >}; <br>

// >**Example:**

// >C# Code:<br>
// >C# program to read static book details and print to console using Structures.
// >```
// >using System;
// >namespace Demo
// >{
// >	struct Books
// >	{
// >		public string title;
// >		public string author;
// >		public string subject;
// >		public int book_id;
// >	};
// >	public class Program
// >	{
// >		public static void Main(string[] args)
// >		{
// >			Books Book1;   /* Declare Book1 of type Book */
// >			Books Book2;   /* Declare Book2 of type Book */
// >
// >			/* book 1 specification */
// >			Book1.title = "Head First C#";
// >			Book1.author = "Jennifer Greene, Andrew Stellman";
// >			Book1.subject = "C# Programming Tutorial";
// >			Book1.book_id = 645866;
// >			/* book 2 specification */	
// >			Book2.title = "C# in Depth";
// >			Book2.author = "Jon Skeet";
// >			Book2.subject = "C# Programming Tutorial";
// >			Book2.book_id = 6426596;
// >	
// >			/* print Book1 info */
// >			Console.WriteLine("---- Book1 Details------");
// >			Console.WriteLine("Book 1 title : {0}", Book1.title);
// >			Console.WriteLine("Book 1 author : {0}", Book1.author);
// >			Console.WriteLine("Book 1 subject : {0}", Book1.subject);
// >			Console.WriteLine("Book 1 book_id :{0}", Book1.book_id);
// >			Console.ReadLine();
// >			/* print Book2 info */
// >			Console.WriteLine("---- Book2 Details------");
// >			Console.WriteLine("Book 2 title : {0}", Book2.title);
// >			Console.WriteLine("Book 2 author : {0}", Book2.author);
// >			Console.WriteLine("Book 2 subject : {0}", Book2.subject);
// >			Console.WriteLine("Book 2 book_id : {0}", Book2.book_id);
// >			Console.ReadLine();
// >
// >		}
// >	}
// >}
// >```
// >**Output:** <br>
// > >---- Book1 Details------ <br>
// > >Book 1 title : Head First C# <br>
// > >Book 1 author :Jennifer Greene, Andrew Stellman <br>
// > >Book 1 subject :C# Programming Tutorial <br>
// > >Book 1 book_id :645866 <br>
// > >
// > >---- Book2 Details------ <br>
// > >Book 1 title : C# in Depth <br>
// > >Book 1 author :Jon Skeet <br>
// > >Book 1 subject :C# Programming Tutorial <br>
// > >Book 1 book_id :6426596 <br>
// > 

// >##### Features of C# Structures:

// > Structures in C# are quite different from that in traditional C or C++. The C# structures have the following features:
 
// >- Structures can have methods, fields, indexers, properties, operator methods, and events.
// >- Structures can have defined constructors, but not destructors. However, you cannot define a default constructor for a structure. The default constructor is automatically defined and cannot be changed.
// >- Unlike classes, structures cannot inherit other structures or classes.
// >- Structures cannot be used as a base for other structures or classes.
// >- A structure can implement one or more interfaces.
// >- Structure members cannot be specified as abstract, virtual, or protected.
// >- When you create a struct object using the New operator, it gets created and the appropriate constructor is called. Unlike classes, structs can be instantiated without using the New operator.
// >- If the New operator is not used, the fields remain unassigned and the object cannot be used until all the fields are initialized.

// >#####Class versus Structure:
// >Classes and Structures have the following basic differences:

// >- classes are reference types and structs are value types
// >- structures do not support inheritance
// >- structures cannot have default constructor

// >**Example:**

// >C# Code:<br>
// >C# program to read static book details and print to console using Structures.
// >```
// >using System;
// >namespace Demo
// >{
// >	struct Books
// >	{
// >		private string title;
// >		private string author;
// >		private string subject;
// >		private int book_id;
// >		public void getValues(string t, string a, string s, int id)
// >		{
// >			title = t;
// >			author = a;
// >			subject = s;
// >			book_id = id;
// >		}	
// >		public void display()
// >		{
// >			Console.WriteLine("Title : {0}", title);
// >			Console.WriteLine("Author : {0}", author);
// >			Console.WriteLine("Subject : {0}", subject);
// >			Console.WriteLine("Book_id :{0}", book_id);
// >		}
// >	};
// >	public class testStructure
// >	{
// >		public static void Main(string[] args)
// >		{
// >			Books Book1 = new Books(); /* Declare Book1 of type Book */
// >			Books Book2 = new Books(); /* Declare Book2 of type Book */
// >
// >			/* book 1 specification */
// >			Book1.getValues("Head First C# ","Jennifer 
// >			Greene, Andrew Stellman ","C Programming 
// >				Tutorial", 645866 );
// >
// >			/* book 2 specification */
// >			Book2.getValues("C# in Depth",
// >				"Jon Skeet ", "C# Programming Tutorial ", 6426596 );
// >
// >			/* print Book1 info */
// >			Console.WriteLine("--------Book1 details-------");
// >			Book1.display();
// >
// >			Console.ReadLine();	
// >			/* print Book2 info */
// >			Console.WriteLine("--------Book2 details-------");
// >			Book2.display();
// >	
// >			Console.ReadLine();
// >		}	
// >	}
// >}
// >```
// >**Output:**<br>
// > >---- Book1 Details------ <br>
// > >Book 1 title : Head First C# <br>
// > >Book 1 author :Jennifer Greene, Andrew Stellman <br>
// > >Book 1 subject :C# Programming Tutorial <br>
// > >Book 1 book_id :645866 <br>
// > >
// > >---- Book2 Details------ <br>
// > >Book 1 title : C# in Depth <br>
// > >Book 1 author :Jon Skeet <br>
// > >Book 1 subject :C# Programming Tutorial <br>
// > >Book 1 book_id :6426596 <br>


